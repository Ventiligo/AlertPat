import psutil
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime, timedelta
import logging
import pickle
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7993011175:AAGb9Pji1jgBeENd0TsfqgcfyAeVTTYrZxI"
CHAT_ID = "1917929126" 
DATA_FILE = "metrics.pkl"
LOG_FILE = "bot.log"
REPORT_INTERVAL = 3600  # 1 —á–∞—Å

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(message)s')

class MetricsStorage:
    def __init__(self):
        self.df = pd.DataFrame(columns=['timestamp', 'cpu', 'ram', 'disk', 'network'])
        try:
            self.load_data()
        except (FileNotFoundError, EOFError, pickle.PickleError):
            self.df = pd.DataFrame(columns=['timestamp', 'cpu', 'ram', 'disk', 'network'])
            self.save_data()

    def add_metrics(self):
        new_data = {
            'timestamp': datetime.now(),
            'cpu': psutil.cpu_percent(),
            'ram': psutil.virtual_memory().percent,
            'disk': psutil.disk_usage('/').percent,
            'network': psutil.net_io_counters().bytes_sent + psutil.net_io_counters().bytes_recv
        }
        self.df = pd.concat([self.df, pd.DataFrame([new_data])], ignore_index=True)
        self.clean_data()
        self.save_data()

    def clean_data(self):
        cutoff = datetime.now() - timedelta(days=7)
        self.df = self.df[self.df['timestamp'] >= cutoff]

    def save_data(self):
        with open(DATA_FILE, 'wb') as f:
            pickle.dump(self.df, f)

    def load_data(self):
        if os.path.exists(DATA_FILE) and os.path.getsize(DATA_FILE) > 0:
            with open(DATA_FILE, 'rb') as f:
                self.df = pickle.load(f)

storage = MetricsStorage()

def detect_anomalies():
    if len(storage.df) < 10:
        return None
    last_24h = storage.df[storage.df['timestamp'] >= datetime.now() - timedelta(hours=24)]
    if len(last_24h) < 5:
        return None
    X = last_24h[['cpu', 'ram', 'network']].values
    model = DBSCAN(eps=2.5, min_samples=3).fit(X)
    anomalies = last_24h[model.labels_ == -1]
    return anomalies.iloc[-1] if not anomalies.empty else None

async def send_report(application):
    storage.add_metrics()
    last = storage.df.iloc[-1]

    msg = (
        "üìä –û—Ç—á—ë—Ç:\n"
        f"CPU: {last['cpu']}%\n"
        f"RAM: {last['ram']}%\n"
        f"–î–∏—Å–∫: {last['disk']}%"
    )

    anomaly = detect_anomalies()
    if anomaly is not None:
        msg += (
            "\n\n‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è:\n"
            f"–í—Ä–µ–º—è: {anomaly['timestamp']}\n"
            f"CPU: {anomaly['cpu']}%\n"
            f"RAM: {anomaly['ram']}%"
        )

    await application.bot.send_message(chat_id=CHAT_ID, text=msg)
    logging.info(f"–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {msg[:50]}...")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/report ‚Äî —Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç\n"
        "/plot_cpu ‚Äî –≥—Ä–∞—Ñ–∏–∫ CPU\n"
        "/plot_ram ‚Äî –≥—Ä–∞—Ñ–∏–∫ RAM\n"
        "/plot_disk ‚Äî –≥—Ä–∞—Ñ–∏–∫ –¥–∏—Å–∫–∞\n"
        "/plot_net ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏\n"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if storage.df.empty:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –±–æ—Ç —Å–æ–±–µ—Ä—ë—Ç –ø–µ—Ä–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏."
        )
        return

    desc = storage.df.describe().round(2)
    desc = desc[['cpu', 'ram', 'disk', 'network']]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏

    headers = "| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | CPU (%) | RAM (%) | –î–∏—Å–∫ (%) | –°–µ—Ç—å (–±–∞–π—Ç) |\n"
    headers += "|------------|---------|----------|-----------|--------------|\n"

    rows = ""
    for index, row in desc.iterrows():
        rows += f"| {index.capitalize():<10} | {row['cpu']:>7} | {row['ram']:>8} | {row['disk']:>9} | {int(row['network']):>12} |\n"

    table_md = headers + rows

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üìà <b>–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n<pre>{table_md}</pre>",
        parse_mode="HTML"
    )


async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.add_metrics()
    last = storage.df.iloc[-1]

    msg = (
        "üìä –û—Ç—á—ë—Ç:\n"
        f"CPU: {last['cpu']}%\n"
        f"RAM: {last['ram']}%\n"
        f"–î–∏—Å–∫: {last['disk']}%"
    )

    anomaly = detect_anomalies()
    if anomaly is not None:
        msg += (
            "\n\n‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è:\n"
            f"–í—Ä–µ–º—è: {anomaly['timestamp']}\n"
            f"CPU: {anomaly['cpu']}%\n"
            f"RAM: {anomaly['ram']}%"
        )

    await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)

def create_plot(column: str, filename: str):
    df = storage.df.copy()
    df = df[df['timestamp'] >= datetime.now() - timedelta(days=2)]
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    plt.figure(figsize=(10, 4))
    plt.plot(df['timestamp'], df[column], marker='o', linestyle='-')
    plt.title(f"{column.upper()} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel(column.upper())
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()

async def send_plot(update: Update, context: ContextTypes.DEFAULT_TYPE, column: str):
    filename = f"{column}.png"
    create_plot(column, filename)
    with open(filename, "rb") as img:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(img))

async def plot_cpu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_plot(update, context, "cpu")

async def plot_ram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_plot(update, context, "ram")

async def plot_disk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_plot(update, context, "disk")

async def plot_net(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_plot(update, context, "network")

async def periodic_report(application):
    while True:
        await send_report(application)
        await asyncio.sleep(REPORT_INTERVAL)

async def on_startup(application):
    await application.bot.send_message(chat_id=CHAT_ID, text="üîÑ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")
    application.create_task(periodic_report(application))

def main():
    application = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("report", report))
    application.add_handler(CommandHandler("plot_cpu", plot_cpu))
    application.add_handler(CommandHandler("plot_ram", plot_ram))
    application.add_handler(CommandHandler("plot_disk", plot_disk))
    application.add_handler(CommandHandler("plot_net", plot_net))

    application.run_polling()

if __name__ == "__main__":
    main()
